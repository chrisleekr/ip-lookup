name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'
  RUNNER_VERSION: 'ubuntu-22.04'

permissions:
  contents: read
  security-events: write

jobs:
  prepare:
    runs-on: ubuntu-22.04
    if: "!contains(github.event.head_commit.message, 'chore(main): release')"
    timeout-minutes: 15
    outputs:
      cache-hit: ${{ steps.npm-cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
        id: npm-cache

      - name: Install dependencies
        run: npm ci
        if: steps.npm-cache.outputs.cache-hit != 'true'

  lint:
    needs: prepare
    runs-on: ubuntu-22.04
    if: "!contains(github.event.head_commit.message, 'chore(main): release')"
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

  lint-dockerfile:
    runs-on: ubuntu-22.04
    if: "!contains(github.event.head_commit.message, 'chore(main): release')"
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  test:
    needs: prepare
    runs-on: ubuntu-22.04
    if: "!contains(github.event.head_commit.message, 'chore(main): release')"
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test -- --ci

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: prepare
    runs-on: ubuntu-22.04
    if: "!contains(github.event.head_commit.message, 'chore(main): release')"
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  docker:
    needs: [build, lint, test, lint-dockerfile]
    runs-on: ubuntu-22.04
    if: "!contains(github.event.head_commit.message, 'chore(main): release')"
    timeout-minutes: 30
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=sha,prefix=dev-,suffix=,format=short

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.repository.updated_at }}
            COMMIT_SHA=${{ github.sha }}

  security:
    needs: docker
    runs-on: ubuntu-22.04
    if: "github.ref != 'refs/heads/main' && !contains(github.event.head_commit.message, 'chore(main): release')"
    timeout-minutes: 20
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ fromJSON(needs.docker.outputs.tags)[0] }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          timeout: '5m'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
