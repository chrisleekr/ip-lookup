image: node:22-alpine

stages:
  - prepare
  - test
  - build
  - security
  - release

variables:
  DOCKER_REGISTRY: ${CI_REGISTRY}
  DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  DOCKER_TAG: dev-${CI_COMMIT_SHA}
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

# Reusable configurations
.cache_config: &cache_config
  key:
    files:
      - package-lock.json
    prefix: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .npm/

.default_rules: &default_rules
  rules:
    # Do not run jobs for version bumps
    - if: '$CI_COMMIT_MESSAGE =~ /bump: version to v[0-9]+\.[0-9]+\.[0-9]+/'
      when: never
    # Do not run jobs for push events with open merge requests
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
      when: never
    # Run jobs for push events and merge request events
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    # Otherwise, do not run jobs
    - when: never

.release_rules: &release_rules
  rules:
    # Do not run jobs for version bumps
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /bump: version to v[0-9]+\.[0-9]+\.[0-9]+/'
      when: on_success

.docker:
  image: docker:24
  services:
    - name: docker:24-dind
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "/certs/client"
    DOCKER_HOST: tcp://docker:2376
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# Main pipeline jobs
dependencies:
  stage: prepare
  image: node:22-alpine
  interruptible: true
  <<: *default_rules
  cache:
    <<: *cache_config
    policy: push
  script:
    - npm ci --cache .npm --prefer-offline

lint:
  stage: test
  image: node:22-alpine
  interruptible: true
  <<: *default_rules
  cache:
    <<: *cache_config
    policy: pull
  script:
    - npm run lint
  needs:
    - dependencies

lint-dockerfile:
  stage: test
  image: hadolint/hadolint:2.12.0-alpine
  <<: *default_rules
  script:
    - hadolint Dockerfile

unit-test:
  stage: test
  image: node:22-alpine
  interruptible: true
  <<: *default_rules
  cache:
    <<: *cache_config
    policy: pull
  script:
    - npm run test -- --ci
  coverage: /All files[^\|]*\|[^\|]*\s+([\d\.]+)/
  artifacts:
    name: coverage
    when: always
    expire_in: 2 days
    paths:
      - coverage/
    reports:
      junit: coverage/jest-junit.xml
  needs:
    - dependencies

build-app:
  stage: build
  image: node:22-alpine
  interruptible: true
  <<: *default_rules
  cache:
    <<: *cache_config
    policy: pull
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  needs:
    - dependencies

build-docker-image-dev:
  extends: .docker
  stage: build
  interruptible: true
  retry: 1
  rules:
    # Do not build dev images for tags
    - if: $CI_COMMIT_TAG
      when: never
    # Do not build dev images for version bumps
    - if: '$CI_COMMIT_MESSAGE =~ /bump: version to v[0-9]+\.[0-9]+\.[0-9]+/'
      when: never
    # Build dev images for all branches
    - if: $CI_COMMIT_BRANCH
      when: always
  script:
    - |
      docker build \
        --cache-from $DOCKER_IMAGE_NAME:cache \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --build-arg VERSION="${CI_COMMIT_SHORT_SHA}" \
        --build-arg BUILD_DATE="${CI_COMMIT_TIMESTAMP}" \
        --build-arg COMMIT_SHA="${CI_COMMIT_SHORT_SHA}" \
        -t $DOCKER_IMAGE_NAME:$DOCKER_TAG \
        -t $DOCKER_IMAGE_NAME:cache \
        .
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_TAG
    - docker push $DOCKER_IMAGE_NAME:cache
  needs:
    - build-app

trivy-vulnerabilities:
  extends: .docker
  stage: security
  interruptible: true
  rules:
    # Do not scan release images
    - if: $CI_COMMIT_TAG
      when: never
    # Do not scan version bumps
    - if: '$CI_COMMIT_MESSAGE =~ /bump: version to v[0-9]+\.[0-9]+\.[0-9]+/'
      when: never
    # Scan all branches except main
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != "main"
      when: always
  variables:
    GIT_STRATEGY: none
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
  script:
    - ./trivy image --exit-code 0 --format json --output gl-container-scanning-report.json $DOCKER_IMAGE_NAME:$DOCKER_TAG
    - ./trivy image --exit-code 0 --severity HIGH $DOCKER_IMAGE_NAME:$DOCKER_TAG
    - ./trivy image --exit-code 1 --severity CRITICAL $DOCKER_IMAGE_NAME:$DOCKER_TAG
  cache:
    paths:
      - .trivycache/
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
    when: always
  needs:
    - build-docker-image-dev

# Release process jobs
.release_job:
  image: node:22-alpine
  stage: release
  variables:
    GIT_STRATEGY: clone
    BUMP_BRANCH: bump/version-${CI_PIPELINE_ID}

release-patch:
  extends: .release_job
  rules:
    # Do not trigger release-patch for version bumps
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE !~ /bump: version to v[0-9]+\.[0-9]+\.[0-9]+/'
      when: manual
  variables:
    NEW_VERSION: patch
  before_script:
    - apk add --no-cache git curl jq
    - |
      git config --global user.email "release-bot@gitlab.com"
      git config --global user.name "Release Bot"
      git remote set-url origin "https://release-bot:${PROJECT_ACCESS_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
  script:
    - git checkout -b "$BUMP_BRANCH"
    - |
      VERSION=$(npm version $NEW_VERSION --no-git-tag-version)
      NEW_TAG="v${VERSION#v}"
      case "$NEW_TAG" in
        v[0-9]*.[0-9]*.[0-9]*)
          ;;
        *)
          echo "Error: Invalid version format: $NEW_TAG"
          exit 1
          ;;
      esac
      echo "NEW_TAG=$NEW_TAG" >> release.env
    - |
      git add package.json package-lock.json
      git commit -m "bump: version to ${NEW_TAG} [skip pipeline]"
      git push -o ci.skip origin "$BUMP_BRANCH"
    - |
      curl --fail --request POST \
        --header "PRIVATE-TOKEN: ${PROJECT_ACCESS_TOKEN}" \
        --header "Content-Type: application/json" \
        --data '{
          "source_branch": "'"${BUMP_BRANCH}"'",
          "target_branch": "'"${CI_COMMIT_BRANCH}"'",
          "title": "bump: version to '"${NEW_TAG}"'",
          "description": "Version bump created by CI pipeline.\n\nThis merge request was automatically created by the release process.",
          "remove_source_branch": true,
          "squash": true,
          "squash_commit_message": "bump: version to '"${NEW_TAG}"'",
          "skip_ci": true
        }' \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests"
    - echo "BUMP_BRANCH=$BUMP_BRANCH" >> release.env
  artifacts:
    expire_in: 1 day
    paths:
      - package.json
      - package-lock.json
      - release.env
    reports:
      dotenv: release.env

release-minor:
  extends: release-patch
  variables:
    NEW_VERSION: minor

release-major:
  extends: release-patch
  variables:
    NEW_VERSION: major

create-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  <<: *release_rules
  script:
    - |
      NEW_TAG=$(echo "$CI_COMMIT_MESSAGE" | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+")
      echo "Creating/updating release for ${NEW_TAG}"
      release-cli create \
        --name "Release $NEW_TAG" \
        --description "Release $NEW_TAG" \
        --tag-name "$NEW_TAG" \
        --ref "$CI_COMMIT_SHA"

build-docker-image-release:
  extends: .docker
  stage: release
  <<: *release_rules
  script:
    - |
      NEW_TAG=$(echo "$CI_COMMIT_MESSAGE" | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+")
      echo "Building release for tag ${NEW_TAG}"
      export RELEASE_TAG=${NEW_TAG#v}
      case "$RELEASE_TAG" in
        [0-9]*.[0-9]*.[0-9]*) ;;
        *) echo "Error: Invalid release tag format: $RELEASE_TAG"; exit 1 ;;
      esac
      docker build \
        --cache-from $DOCKER_IMAGE_NAME:cache \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --build-arg BUILD_DATE="${CI_COMMIT_TIMESTAMP}" \
        --build-arg COMMIT_SHA="${CI_COMMIT_SHORT_SHA}" \
        --build-arg VERSION="${RELEASE_TAG}" \
        -t $DOCKER_IMAGE_NAME:$RELEASE_TAG \
        -t $DOCKER_IMAGE_NAME:cache \
        -t $DOCKER_IMAGE_NAME:latest \
        .
      docker push $DOCKER_IMAGE_NAME:$RELEASE_TAG
      docker push $DOCKER_IMAGE_NAME:cache
      docker push $DOCKER_IMAGE_NAME:latest
      for TAG in "$RELEASE_TAG" "cache" "latest"; do
        if ! docker pull $DOCKER_IMAGE_NAME:$TAG >/dev/null 2>&1; then
          echo "Error: Failed to verify push of $DOCKER_IMAGE_NAME:$TAG"
          exit 1
        fi
      done
  needs: []
